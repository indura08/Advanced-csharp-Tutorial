💡 Why Use Delegates?
-----------------------

Delegates allow you to:

1. Pass methods as parameters (just like variables).
2. Enable event-driven programming (used in UI frameworks, logging, etc.).
3. Decouple components (reduces dependencies between classes).
4. Implement callbacks (e.g., execute different functions dynamically).
5. Support LINQ-style programming (e.g., using Func<> and Action<>).

🌍 Real-World Examples of Delegates
-------------------------------------

1️⃣ Event Handling (Used in UI Frameworks & Game Development)

📌 Scenario: You are building a button click handler in a UI.
You don’t want to hardcode the logic inside the button.
Instead, you pass a function (delegate) to handle the button click dynamically.

example:

using System;

class Button
{
    public delegate void ClickHandler();  // Define a delegate
    public event ClickHandler OnClick;   // Declare an event using the delegate

    public void Click()
    {
        OnClick?.Invoke();  // Invoke the delegate (if assigned)
    }
}

class Program
{
    static void ShowMessage() => Console.WriteLine("Button Clicked!");

    static void Main()
    {
        Button btn = new Button();
        btn.OnClick += ShowMessage;  // Assign function to delegate

        btn.Click();  // Simulates clicking a button
        // Output: Button Clicked!
    }
}
