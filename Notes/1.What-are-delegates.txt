What is a Delegate?
====================

A delegate is like a variable that can store a method instead of a value.

Imagine a TV remote 🎛️.

You press the volume up button → It calls the Increase Volume function.
You press the channel up button → It calls the Next Channel function.
A delegate is like that button, which can call different methods!


Basic Example

Step 1: Create a Delegate

A delegate is like a template for a method.

// This delegate can hold any method that takes two numbers and returns a number.
delegate int MathOperation(int x, int y);

Step 2: Assign a Method to It

Now, let's create a method and assign it to the delegate.

class Program
{
    // A simple method that matches our delegate's signature
    static int Add(int a, int b) => a + b;

    static void Main()
    {
        // Create a delegate and assign it to the Add method
        MathOperation operation = Add;

        // Use the delegate like calling a function
        int result = operation(5, 3);
        Console.WriteLine(result);  // Output: 8
    }
}

🎯 What’s happening here?

MathOperation can store any method that takes two int values and returns an int.
We assigned the Add method to operation.
We called operation(5,3), which actually calls Add(5,3), so we get 8.

Why Use Delegates?

Imagine you’re ordering food online 🍕.

You can choose Pizza, Burger, or Pasta.
But you don’t know what the chef will cook until you place the order.
The chef follows your choice and cooks the right dish.

A delegate works the same way! It stores a method, and you can change it at runtime.

Example:

Multicast Delegates (Calling Multiple Methods)
You can store multiple methods in one delegate and call them all at once! 🎯

class Program
{
    static void Method1() => Console.WriteLine("Method 1 is called.");
    static void Method2() => Console.WriteLine("Method 2 is called.");

    delegate void MultiDelegate();

    static void Main()
    {
        MultiDelegate del = Method1;
        del += Method2;  // Adding another method

        del();  // Calls both Method1 and Method2
    }
}


🔹 del += Method2; adds Method2 to the delegate.
🔹 When del(); is called, both Method1 and Method2 run.


Types of Delegates in C#
-------------------------

1. Single-Cast Delegate (Basic Delegate)

A delegate that points to only one method at a time.
(We already saw this in the example above.)

2. Multi-Cast Delegate (Pointing to Multiple Methods)

A delegate can hold multiple methods and execute them in sequence.

class Program
{
    static void Method1() => Console.WriteLine("Method 1");
    static void Method2() => Console.WriteLine("Method 2");

    delegate void MultiDelegate(); // Delegate with no parameters

    static void Main()
    {
        MultiDelegate del = Method1;
        del += Method2; // Adding another method

        del();  // Calls both Method1 and Method2
    }
}


🔹 What happens here?

The delegate del first holds Method1.
del += Method2; adds Method2 to the delegate.
Calling del(); executes both methods in order.


3. Anonymous Methods (Inline Delegates)

Instead of writing a separate method, you can define a delegate inline.


MathOperation operation = delegate (int x, int y)
{
    return x * y;
};

Console.WriteLine(operation(5, 4));  // Output: 20

4. Lambda Expressions (Shorter Anonymous Methods)

Lambdas make delegate usage shorter and cleaner.

MathOperation operation = (x, y) => x * y;
Console.WriteLine(operation(5, 4));  // Output: 20

🔹 What’s happening here?

(x, y) => x * y; is a lambda expression that replaces the anonymous method.


Built-in Delegates in C#
=========================

C# provides predefined generic delegates to avoid writing custom ones.

1. Action<> (Delegate that returns void)

Action<string> greet = name => Console.WriteLine($"Hello, {name}!");
greet("Alice");  // Output: Hello, Alice!


🔹 Action<T> is a built-in delegate that takes parameters but returns nothing (void).

2. Func<> (Delegate that Returns a Value)

Func<int, int, int> multiply = (a, b) => a * b;
Console.WriteLine(multiply(5, 4));  // Output: 20

🔹 Func<T, TResult> takes parameters and returns a value.


3. Predicate<> (Delegate that Returns bool)

Predicate<int> isEven = num => num % 2 == 0;
Console.WriteLine(isEven(4));  // Output: True


🔹 Predicate<T> always returns bool.




